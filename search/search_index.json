{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Build a Retail Copilot Code-First on Azure AI","text":"<p>This website contains the step-by-step instructions for a hands-on workshop that teaches you how to build, evaluate, and deploy, a retail copilot code-first on Azure AI. </p> <ul> <li>The solution uses the Retrieval Augmented Generation (RAG) pattern to ground chat AI responses in the retailer's product catalog and cusomer data.</li> <li>The implementation uses Prompty for ideation, Azure AI Studio as the underlying platform for GenAIOps, and Azure Container Apps for hosting the deployed copilot.</li> </ul> <p>This section introduces you to the application scenario (retail copilot), briefly reviews the Retrieval Augmented Generation (RAG) design pattern implemented, and illustrates the Azure AI application architecture used for solution deployment - with a link to resources for the key developer tools and services used.</p>"},{"location":"#1-the-app-scenario","title":"1. The App Scenario","text":"<p>Contoso Outdoors is an enterprise retailer that sells a wide variety of hiking and camping equipment to outdoor adventurers. The retailer's website has an extensive catalog of products with customers constantly asking questions and looking for information and recommendations, to make relevant purchases. The retailer decides to build a customer support agent to handle these queries right within the website.</p> <p></p> <p>Contoso Chat is the implementation of that vision, with a retail copilot backend that can be interacted with directly from the website. Customers can now ask the chatbot questions in natural language - and get back valid responses that are grounded in the product catalog and their own purchase history.</p> <p></p>"},{"location":"#2-the-rag-pattern","title":"2. The RAG Pattern","text":"<p>Many foundation models are trained on massive quantities of public data, giving them the ability to answer general-purpose queries effectively. However, in our app scenario, we want responses based on private data from the retailer databases. The Retrieval Augmented Generation (RAG) pattern is currently the recommended approach to solving this problem.</p> <ol> <li>The user query arrives at our copilot implementation via the endpoint (API).</li> <li>It sends the text query to a retrieval service which vectorizes it for efficiency.</li> <li>It uses this vector to query a search index for matching results (e.g., based on similarity)</li> <li>It then returns results to the copilot, potentially with semantic ranking applied.</li> <li>The copilot augments the prompt with the results, then calls the chat model.</li> <li>The chat model now generates responses grounded in the knowledge provided.</li> </ol> <p></p>"},{"location":"#3-the-app-architecture","title":"3. The App Architecture","text":"<p>Implementing this design pattern requires:</p> <ul> <li>an information retrieval service (data indexing, similarity search, semantic ranking)</li> <li>a database service for storing other data (customer orders)</li> <li>a model deployments capability (for chat, embeddings - and AI-assisted evaluation)</li> <li>a copilot hosting capability (for real-world access to deployed endpoint)</li> </ul> <p>The figure below shows the Azure application architecture for the Contoso Chat Retail Copilot, showcasing these elements. The copilot is deployed to Azure Container Apps, providing a hosted API endpoint for client integration. Requests to that endpoint are processed with:</p> <ul> <li>Azure OpenAI Services  - provides model deployments for chat and text embeddings</li> <li>Azure CosmosDB  - stores the customer order data (JSON) in a noSQL database</li> <li>Azure AI Search  - indexes the product catalog with search-retrieval capability. </li> </ul> <p></p> <p>The orchestration of RAG workflow steps is achieved using Prompty assets configured with relevant Azure OpenAI models and executed in a Prompty runtime (Python). This solution can support multi-turn conversations and illustrates usage of responsible AI practices (i.e., evaluation, content safety) to deliver responses that meet desired quality and safety standards.</p>"},{"location":"#4-related-resources","title":"4. Related Resources","text":"<ol> <li>Prompty | Documentation \u00b7 Specification  \u00b7 Tooling \u00b7 SDK</li> <li>Azure AI Studio  | Documentation  \u00b7 Architecture \u00b7 SDKs \u00b7  Evaluation</li> <li>Azure AI Search | Documentation  \u00b7 Semantic Ranking </li> <li>Azure Container Apps  | Azure Container Apps  \u00b7 Deploy from code</li> <li>Responsible AI  | Overview  \u00b7 With AI Services  \u00b7 Azure AI Content Safety</li> </ol>"},{"location":"00-Before-You-Begin/","title":"0\ufe0f\u20e3 | Pre-Requisites","text":"<p>PRE-REQUISITES FOR THIS WORKSHOP</p> <p>To participate in this workshop you will need the following:</p> <ol> <li>Your own laptop. Should have a modern browser, preferably Microsoft Edge.</li> <li>A GitHub account. A personal account with GitHub Codespaces access.</li> <li>An Azure subscription. With access to Azure OpenAI Model deployments.</li> <li>Familiarity with VS Code. Our default development environment.</li> <li>Familiarity with Python. Our default coding language.</li> <li>Familiarity with Azure CLIs. Our default deployment tooling.</li> </ol> WHAT YOU WILL LEARN <p>In this hands-on workshop, you will learn to:</p> <ul> <li>Use the Azure AI platform for code-first development of custom copilot solutions</li> <li>Infrastructure: Simplified provisioning and deployment with Azure Developer CLI</li> <li>Ideation: Rapid prototyping with Prompty asset and Azure AI model deployments</li> <li>Evaluation: Manual and AI-assisted testing with custom evaluators (for quality, safety)</li> <li>Operationalization: Deployment using Azure Container Apps (next: monitoring &amp; actions)</li> <li>Customization: adapt to your application needs (data, prompts, models, evaluators)</li> </ul> <p>The workshop is designed for delivery in two formats:</p> <ol> <li> <p>This option is if you are in an instructor-led session on the Microsoft AI Tour.</p> <p>Start Here: 01 | Tour Guided: Setup \u2192 1\ufe0f\u20e3 | Getting Started</p> </li> <li> <p>Use this option if you are working through the workshop yourself.</p> <p>Start Here: 02 | Self Guided: Setup \u2192 1\ufe0f\u20e3 | Getting Started</p> </li> </ol>"},{"location":"01-Tour-Guide-Setup/01-setup/","title":"1\ufe0f\u20e3 | Getting Started","text":"<p>Thie instructions are for participants of the instructor-led \"WRK550: Build a Retail Copilot Code-First on Azure AI\" workshop offered on the Microsoft AI Tour (2024-2025). If you're not at an AI Tour event right now, you can register for an upcoming event in a city near you.</p> <ul> <li>Register to attend at a tour stop near you.</li> <li>View Lab resources to continue your journey.</li> </ul> <p>First \u2192 Review  0\ufe0f\u20e3 | Pre-requisites before you begin setup</p>"},{"location":"01-Tour-Guide-Setup/01-setup/#1-launch-skillable-lab","title":"1. Launch Skillable Lab","text":"<p>Your instructor should have shared a Skillable Lab Link with you at this time. In this section, we'll launch the Skillable VM and verify that we have the right credentials for the workshop. </p> Step 0: Launch Browser Window In Incognito Mode <p>The workshop is conducted completely within a browser environment. You may have an enterprise Azure or GitHub account that you are logged into that may cause conflicts. To avoid this, we recommend opening a new browser window in incognito mode (private mode) with your preferred browser. </p> <ul> <li>Open a new browser window in incognito or private mode</li> <li>Tip: If you're using Microsoft Edge, we recommend creating 2 tab groups as follows:<ul> <li>Group 1 = \"Skillable\" - open tabs A and B below for Skillable setup</li> <li>Group 2 = \"Development\" - open tabs 1\ufe0f\u20e3-4\ufe0f\u20e3 below for all workshop development</li> </ul> </li> </ul> Step 1: Launch Skillable Lab <ol> <li>Open a new browser window (in incognito mode)</li> <li>Navigate to Skillable Lab (use insrtuctor provided link) = Tab A </li> <li>Click <code>Launch</code> - opens window with Login, Instructions = Tab B</li> <li>Click <code>Resources</code> tab - find admin <code>Password</code></li> <li>Click to fill password for login - confirm</li> <li>You should see: Windows 11 Desktop \u2705</li> <li>Revisit <code>Resources</code> tab - look for <code>Azure Portal</code> section</li> <li>Verify <code>Subscription</code>, <code>Username</code>, <code>Password</code> assigned \u2705</li> <li>Keep this browser open - you will need the credentials in the next step</li> </ol> <p>\ud83c\udf1f | CONGRATULATIONS! - Your Skillable VM is live!</p>"},{"location":"01-Tour-Guide-Setup/01-setup/#4-setup-development-env","title":"4. Setup Development Env","text":"Step 2: Open GitHub in tab 1\ufe0f\u20e3, Launch Codespaces in tab 2\ufe0f\u20e3 <ol> <li>Open a new browser tab = Tab 1\ufe0f\u20e3</li> <li>Navigate to the workshop sample (Contoso Chat) </li> <li>Log into GitHub - use a personal login account</li> <li>Fork this sample to your profile - uncheck <code>main</code> to get branches</li> <li>Switch to <code>WRK-550</code> branch in your fork</li> <li>Click green <code>Code</code> button, select <code>Codespaces</code> tab</li> <li>Click <code>Create new codespaces on WRK-550</code></li> <li>This should launch a new browser tab = Tab 2\ufe0f\u20e3</li> <li>Verify the new tab shows a VS Code editor \u2705</li> <li>Codespaces is loading ... this take a while</li> </ol> <p>\ud83c\udf1f | CONGRATULATIONS! - Your Codespaces is running</p> Step 3: View Azure Portal in tab 3\ufe0f\u20e3 <ol> <li>Open a new browser tab = Tab 3\ufe0f\u20e3</li> <li>Navigate to the Azure Portal</li> <li>Sign in with Skillable <code>Username</code>-<code>Password</code> from Step 1.</li> <li>Click <code>Resource Groups</code> - refresh it periodically if needed</li> <li>See: resource group <code>rg-AITOUR</code> created \u2705</li> <li>Click resource group item - see 'Overview' in details page</li> <li>View <code>Deployments</code> under Essentials - see 35 deployments \u2705</li> <li>View <code>Overview</code> resources listed - veriify 15 resources created \u2705</li> </ol> <p>\ud83c\udf1f | CONGRATULATIONS! - Your Azure Infra is Provisioned!</p> Step 4: View Azure AI Studio in tab 4\ufe0f\u20e3 <ol> <li>Open a new browser tab = Tab 4\ufe0f\u20e3</li> <li>Navigate to the Azure AI Studio</li> <li>Click <code>Sign in</code> - should auto-login with Azure credentials</li> <li>Click <code>All resources</code> - see: a hub resource listed</li> <li>Click hub resource - see: a project resource listed</li> <li>Click <code>Deployments</code> tab - see: 4 models under <code>aoai-connection</code> \u2705</li> <li>Check: <code>gpt-4</code>, <code>gpt-35-turbo</code>, <code>text-embedding-ada-002</code> listed \u2705</li> </ol> <p>\ud83c\udf1f | CONGRATULATIONS! - Your Azure AI Project was created!</p> Step 5: View Container Apps Endpoint in tab 5\ufe0f\u20e3 <ol> <li>Return to Azure Portal = Tab 3\ufe0f\u20e3</li> <li>Visit the <code>rg-AITOUR</code> Resource group page</li> <li>Click the <code>Container Apps</code> resource - see details page</li> <li>Look for <code>Application Url</code> - at top right</li> <li>Click to launch in new tab = Tab 5\ufe0f\u20e3</li> <li>See: page with <code>\"Azure Container Apps\"</code> and logo</li> </ol> <p>\ud83c\udf1f | CONGRATULATIONS! - Your ACA Endpoint is alive!</p> <p>We verified our Skillable credentials worked, and launched our Codespaces environment!</p> <p>Next \u2192 2\ufe0f\u20e3 Validate Setup before you begin building</p>"},{"location":"01-Tour-Guide-Setup/02-validate/","title":"2\ufe0f\u20e3 | Validate Setup","text":"<p>Let's Review: We should have these tabs open in browser</p> <ol> <li>Tab A = Skillable Lab </li> <li>Tab B = Skillable VM</li> <li>Tab 1\ufe0f\u20e3 = GitHub Repo</li> <li>Tab 2\ufe0f\u20e3 = GitHub Codespaces</li> <li>Tab 3\ufe0f\u20e3 = Azure Portal</li> <li>Tab 4\ufe0f\u20e3 = Azure AI Studio</li> <li>Tab 5\ufe0f\u20e3 = Azure Container Apps.</li> </ol> <p>In this section we'll authenticate with Azure from our GitHub Codespaces environment, and do some post-provisioning steps to get us ready for development.</p>"},{"location":"01-Tour-Guide-Setup/02-validate/#on-github-codespaces","title":"On GitHub Codespaces","text":"<p>Lets authenticate with Azure and configure local development environment to use  infrastructure.</p> Step 1: Validate Codespaces Ready in 2\ufe0f\u20e3 <ol> <li>Return to GitHub Codespaces tab </li> <li>See: VS Code editor with terminal open</li> <li>Verify: <code>Prompty Extension</code> in sidebar (left, bottom)</li> <li>Verify: Cursor ready in VS Code terminal (bottom)</li> <li>Verify Python installed: <code>python --version</code> \u2705</li> <li>Verify Azure CLI installed: <code>az version</code> \u2705</li> <li>Verify Azure Developer CLI installed: <code>azd version</code> \u2705</li> <li>Verify Prompty installed: <code>prompty --version</code> \u2705</li> <li>Verify FastAPI installed: <code>fastapi --version</code> \u2705</li> </ol> Step 2: Authenticate with Azure via CLIs in 2\ufe0f\u20e3 <ol> <li>Log into Azure CLI - <code>az login --use-device-code</code></li> <li>Complete authflow - use default tenant, subscription</li> <li>You are now logged into Azure CLI \u2705</li> <li>Log into Azure Developer CLI - <code>azd auth login</code></li> <li>Complete authflow - see: \"Logged in to Azure\" \u2705</li> </ol> Step 3: Refresh Azure Dev Env in local env in 2\ufe0f\u20e3 <ol> <li>Run <code>azd env refresh -e AITOUR</code> in terminal</li> <li>Select default subscription</li> <li>Select <code>francecentral</code> as Azure location</li> <li>See: <code>SUCCESS: Environment refresh completed</code></li> <li>See: <code>.azure/AITOUR/.env</code> created with values  \u2705</li> </ol> Step 4: Run post-provisioning hooks in 2\ufe0f\u20e3 <ol> <li>Run <code>bash ./docs/workshop/src/0-setup/azd-update-roles.sh</code> in terminal</li> <li>This will take a few minutes ....</li> <li>Run <code>azd hooks run postprovision</code> in terminal</li> <li>This will take a few minutes ....</li> <li>Builds and deploys container app ..</li> <li>Verify that you see a <code>.env</code> file in your repo \u2705</li> <li>Refresh Container App in tab 5\ufe0f\u20e3 - verify that you see \"Hello world\" \u2705</li> </ol> <p>We completed all the post-provisioning steps and are now ready to get to work.</p> <p>!!! info \"Next \u2192 3\ufe0f\u20e3 Validate Infra before we start building!</p>"},{"location":"02-Self-Guide-Setup/01-setup/","title":"1\ufe0f\u20e3 | Getting Started","text":"<p>These are the instructions for Self Guided learners for this workshop. By the end of this section, you should have provisioned your Azure infrastructure yourself, and validated your local development environment in GitHub Codespaces.</p> <p>First \u2192 Review  0\ufe0f\u20e3 | Pre-requisites before you begin setup</p>"},{"location":"02-Self-Guide-Setup/01-setup/#1-setup-dev-environment","title":"1. Setup Dev Environment","text":"<p>The workshop requires a laptop with a modern browser installed. All steps happen in the browser, using GitHub Codespaces to connect to a development container in the cloud. </p> <p>TIP: USE PRIVATE OR INCOGNITO MODE IN BROWSER</p> <p>You may have an enterprise Azure or GitHub account that you are logged into, for work. To avoid conflicts for this workshop, we recommend opening a new browser window in incognito mode (private mode) for this workshop. Any modern browser will do - we recommend Microsoft Edge and using Tab Groups to organize your work for clarity.</p> <p>In this section, you will create a copy of the repository in your profile and use it for exploration. Then GitHub Codespaces to get a pre-built development environment ready to go.</p> Step 0: Launch Browser, Fork Sample in tab 1\ufe0f\u20e3  <ol> <li>Open a browser tab 1\ufe0f\u20e3 </li> <li>Navigate to (Contoso Chat) sample</li> <li>Log into GitHub - use a personan login for optimal experience</li> <li>Fork the sample to your profile - uncheck <code>main</code> to get branches</li> <li>Verify that your fork has all branches - including <code>aitour-WRK550</code></li> <li>\u2705 | You forked the sample successfully!</li> </ol> Step 1: Launch GitHub Codespaces in tab 2\ufe0f\u20e3 <ol> <li>Switch to <code>aitour-WRK550</code> branch in your fork - click the Code button</li> <li>Select <code>Codespaces</code> tab - click <code>Create new codespaces on aitour-WRK550</code></li> <li>This will launch Codespaces in a new browser tab - let's call it tab 2\ufe0f\u20e3,</li> <li>Verify that the tab shows a Visual Studio Code editor instance</li> <li>GitHub Codespaces is loading .. this takes a few minutes so let's move on.</li> <li>\u2705 | Your Codespaces tab is live!</li> </ol> Step 2: View Azure Portal in tab 3\ufe0f\u20e3 <ol> <li>Open new browser tab 3\ufe0f\u20e3</li> <li>Navigate to the Azure Portal</li> <li>Login with your Azure username and password</li> <li>Click on <code>Resource Groups</code> - leave this page open and move on.</li> <li>\u2705 | Your Azure Portal tab is live!</li> </ol> Step 4: View Azure AI Studio in tab 4\ufe0f\u20e3 <ol> <li>Open new browser tab 4\ufe0f\u20e3</li> <li>Navigate to the Azure AI Studio</li> <li>Click <code>Sign in</code> - should auto-login with prior Azure credentials</li> <li>Click <code>All resources</code>  - leave this page open and move on.</li> <li>\u2705 | Your Azure AI Project tab is live!</li> </ol> Step 5: Authenticate with Azure from tab 2\ufe0f\u20e3 <ol> <li>Return to GitHub Codespaces tab 2\ufe0f\u20e3</li> <li>Verify that VS Code is ready - you see a terminal with active cursor</li> <li>Authenticate with Azure CLI<ul> <li>run: <code>az login --use-device-code</code> </li> <li>follow instructions and complete auth workflow (in a new tab)</li> <li>select the valid Azure subscription and tenant to use</li> <li>dismiss this tab and return to tab 2\ufe0f\u20e3</li> <li>\u2705 | You are logged into Azure CLI</li> </ul> </li> <li>Authenticate with Azure Developer CLI<ul> <li>run: <code>azd auth login</code></li> <li>follow instructions and complete auth workflow (in a new tab)</li> <li>dismiss this tab and return to tab 2\ufe0f\u20e3</li> <li>You should see: \"Logged in to Azure\"</li> <li>\u2705 | You are logged into Azure Developer CLI</li> </ul> </li> </ol> <p>Your development environment is all set. Now it's time to provision infra.</p> <p>Next \u2192 3\ufe0f\u20e3 Provision Infra before we start building!</p>"},{"location":"02-Self-Guide-Setup/02-provision/","title":"2\ufe0f\u20e3 | Provision Infra","text":"Step 6: Provision infra with <code>azd</code> in tab 2\ufe0f\u20e3 <ol> <li>Stay in tab 2\ufe0f\u20e3 - enter <code>azd up</code> and follow prompts<ol> <li>Enter a new environment name - use <code>AITOUR</code></li> <li>Select a subscription - pick the same one from step 5.</li> <li>Select a location - pick <code>francecentral</code> (or <code>swedencentral</code>)</li> <li>You should see: \"You can view detailed progress in the Azure Portal ...\"</li> </ol> </li> <li>Provisioning takes a while to complete - let's track status next.</li> <li>\u2705 | Your Azure infra is currently being provisioned..</li> </ol> Step 7: Track provisioning status in tab 3\ufe0f\u20e3 <ol> <li>Switch to the Azure Portal in tab 3\ufe0f\u20e3</li> <li>Click on Resource Groups - see: <code>rg-AITOUR</code></li> <li>Click on <code>rg-AITOUR</code> - see <code>Deployments</code> under Essentials</li> <li>Click <code>Deployments</code> - see Deployments page with activity and status ...</li> <li>Wait till all deployments complete - this can take 20-25 minutes</li> <li>See <code>Overview</code> page - you should have 35 Deployment Items</li> <li>See <code>Overview</code> page - you should have 15 Deployed Resources</li> <li>Return to tab 2\ufe0f\u20e3 and look at terminal - you should see:<ol> <li>SUCCESS: Your up workflow to provision and deploy to Azure completed in XX minutes YY seconds.</li> </ol> </li> <li>\u2705 | Your Azure infra is ready!</li> </ol> <p>The last step provisions the Azure infrastructure and deploys the first version of your application. We are now ready to get to work.</p> <p>!!! info \"Next \u2192 3\ufe0f\u20e3 Validate Infra before we start building!</p>"},{"location":"03-Workshop-Build/03-infra/","title":"3\ufe0f\u20e3 | Validate Infra","text":"Step 1: Validate Azure Cosmos DB is ready in tab 3\ufe0f\u20e3 <ol> <li>Switch to the Azure Portal tab 3\ufe0f\u20e3 - <code>rg-AITOUR</code> resource Overview</li> <li>Click the <code>Azure Cosmos DB account</code> resource - visit details page</li> <li>Click <code>Data Explorer</code> in top-nav menu on details page <ul> <li>dismiss the popup dialog </li> <li>see: <code>contoso-outdoors</code> container with <code>customers</code> database</li> <li>click <code>customers</code> - select <code>Items</code></li> <li>you should see: 12 data items in database</li> </ul> </li> <li>\u2705 | Your Azure Cosmos DB resources is ready!</li> </ol> Step 2: Validate Azure AI Search is ready in tab 3\ufe0f\u20e3 <ol> <li>Switch to the Azure Portal tab 3\ufe0f\u20e3 - <code>rg-AITOUR</code> resource Overview</li> <li>Click the <code>Search service</code> resource - visit details page</li> <li>Click <code>Search Explorer</code> in top-nav menu on details page <ul> <li>see Search explorer with default index <code>contoso-products</code></li> <li>click \"Search\" with no other input</li> <li>should see: Results dialog fill with index data</li> </ul> </li> <li>\u2705 | Your Azure AI Search resource is ready!</li> </ol> Step 3: Validate Azure AI Project is ready in tab 4\ufe0f\u20e3 <ol> <li>Switch to Azure AI Studio in tab 4\ufe0f\u20e3 - start on Home page</li> <li>Click <code>All resources</code> in sidebar - Note: this may say <code>All hubs</code>.</li> <li>Verify that you see a Hub resource - Note: you may also see an AI Services resource</li> <li>Click the hub resource - you should see a project listed in hub overview page</li> <li>Click the project resource - visit <code>Deployments</code> in the sidebar<ul> <li>see <code>aoai-connection</code> and <code>aoai-safety-connection</code> sections</li> <li>each has 3 model deployments - we care about three of these     -gpt-35-turbo, gpt-4, text-embedding-ada-002</li> </ul> </li> <li>\u2705 | Your Azure AIProject resource is ready!</li> </ol> Step 4: Validate Azure Container Apps is ready in tab 3\ufe0f\u20e3 <ol> <li>Switch to the Azure Portal tab 3\ufe0f\u20e3 - <code>rg-AITOUR</code> resource Overview</li> <li>Click the <code>Azure Container App</code> resource - visit details page</li> <li>Click <code>Application Url</code> in Essentials section of Overview</li> <li>You should see: new tab 5\ufe0f\u20e3 with page showing `{\"message\" : \"Hello World\" }\" </li> <li>\u2705 | Your Azure Container App resource is ready and has app deployed!</li> </ol> Step 5: Test the Deployed Container App in tab 5\ufe0f\u20e3  <ol> <li>Visit the <code>Application Url</code> page from Step 10 in tab 5\ufe0f\u20e3</li> <li>Add a <code>/docs</code> suffix to that path - you should see: FastAPI page</li> <li>Expand the <code>POST</code> section by clicking the arrow<ul> <li>click <code>Try it out</code> to make inputs editable</li> <li>enter <code>Tell me about your tents</code> for question</li> <li>enter <code>2</code> for customer_id</li> <li>enter []` for chat_history</li> <li>enter Execute to run the query</li> </ul> </li> <li>You should get a valid response with <code>answer</code> and <code>context</code>.</li> <li>\u2705 | Your Contoso Chat AI is deployed - and works with valid inputs!</li> </ol> This Completes Setup. Let's Review Status. <p>At this stage you should have the following 5 tabs open:</p> <ol> <li>Github Repo - starting tab 1\ufe0f\u20e3</li> <li>GitHub Codespaces 2\ufe0f\u20e3</li> <li>Azure Portal 3\ufe0f\u20e3</li> <li>Azure AI Studio 4\ufe0f\u20e3</li> <li>Azure Container Apps 5\ufe0f\u20e3</li> <li>\u2705 | All Azure resources are provisioned</li> <li>\u2705 | Contoso Chat is deployed to ACA endpoint</li> </ol> <p>We can now get to work on exploring the codebase and understanding how the application is architected, developed, evaluated, and deployed.</p>"},{"location":"03-Workshop-Build/04-ideation/","title":"4\ufe0f\u20e3 | Ideate With Prompty","text":"Step 1: Create a New Prompty <ul> <li>create an empty folder in root of repo (e.g., <code>sandbox</code>)</li> <li>switch to that directory in terminal: <code>cd sandbox</code></li> <li>right click to create <code>New Prompty</code> - you see: <code>basic.prompty</code></li> <li>run the prompty: you will be prompted to sign into Azure - complete auth flow.</li> <li>Result: You should get an Error since model configuration is invalid<ul> <li>\u274c | <code>Error: 404 The API deployment for this resource does not exist.</code></li> </ul> </li> </ul> Step 2: Update model configuration <ul> <li>Copy the previous prompty to a new one: <code>cp basic.prompty chat-0.prompty</code></li> <li>Update this line as shown: <code>azure_deployment: ${env:AZURE_OPENAI_CHAT_DEPLOYMENT}</code></li> <li>Run the prompty - should run immediately.</li> <li>Result: You should get a valid response<ul> <li>Example: \"[info] Hello Seth! I'd be happy to tell you about our tents ...\"</li> </ul> </li> <li>\u2705 | Your prompty model configuration is working</li> </ul> Step 3: Update prompt template, add sample for testing <ul> <li>Let's start refactoring the prompt in steps, till we get to the Contoso Chat version</li> <li>First: <code>cp ../docs/workshop/src/chat-1.* .</code> to get the next iteration<ul> <li><code>chat-1.prompty</code> has customized frontmatter and starter template for Contoso chat</li> <li><code>chat-1.json</code> has a sample test file we can use for validating it</li> </ul> </li> <li>Run <code>chat-1.prompty</code><ul> <li>You see: valid response</li> <li>Try changing max_tokens to 3000 - what happens?</li> <li>Try adding <code>Provide responses in a bullet list of items</code> to system - what happens?</li> </ul> </li> <li>\u2705 | Your prompty template is updated &amp; uses sample test file</li> </ul> Step 4: Update prompt template, add Safety instructions <ul> <li>Let's add a <code>Safety</code> guidance section</li> <li>Run: <code>cp ../docs/workshop/src/chat-2.* .</code> to get version with Safety<ul> <li>Run default prompt and safe sample: Works as expected</li> <li>Update to jailbreak sample; <code>cp ../docs/workshop/src/chat-2-jailbreak.json  chat-2.json</code></li> <li>Run it - the new input tries to jailbreak the app. </li> <li>What happens? You should see: <ul> <li><code>I'm sorry, but I'm not able to change my rules. My purpose is to assist you with questions related to Contoso Outdoors products. If you have any questions about our products or services, feel free to ask! \ud83d\ude0a</code></li> </ul> </li> </ul> </li> <li>\u2705 | Your prompty now has Safety guidance built-in</li> </ul> Step 5: Update prompt template, run with Python code <ul> <li>Let's run the Prompty asset from Python code.</li> <li>Copy these files; <code>cp ../docs/workshop/src/chat-3* .</code></li> <li>Right-click on the <code>chat-3.prompty</code> file: select <code>Add Prompty Code</code></li> <li>It creates: <code>chat-3.py</code> - open it and add these lines at the top     <pre><code>## Load environment variables\nfrom dotenv import load_dotenv\nload_dotenv()\n</code></pre></li> <li>Run the file by clicking the play icon. You should see a valid result.</li> </ul> Congratulations \ud83c\udf89 - You learned prompt engineering with Prompty! <ul> <li>First, create a base prompt and configure the model, parameters</li> <li>Next, modify frontmatter to personalize usage, define inputs &amp; test sample</li> <li>Then, modify body to reflect system context, instructions and template structure</li> <li>Last, create code to run Prompty from command-line or in automated workflows</li> </ul> <p>Iterate and explore changes and their impact on prompt response quality &amp; cost. With each iteration, you should get closer to the <code>contoso_chat/chat.prompty</code> final version. Delete your <code>sandbox/</code> folder when done, to keep original app source in focus</p>"},{"location":"03-Workshop-Build/05-evaluation/","title":"5\ufe0f\u20e3 | Evaluate with AI","text":"Step 1: Understand custom Prompty Evaluators <ul> <li>Switch to <code>src/api/evaluators/custom_evals</code></li> <li>You should see 4 prompty files. Open each in order, and run them</li> <li>You should see something like this (output simplified for clarity)     <pre><code>2024-09-16 21:35:43.602 [info] Loading /workspaces/contoso-chat/.env\n2024-09-16 21:35:43.678 [info] Calling ...\n2024-09-16 21:35:44.488 [info] 5\n\n2024-09-16 21:35:51.232 [info] Loading /workspaces/contoso-chat/.env\n2024-09-16 21:35:43.678 [info] Calling ...\n2024-09-16 21:35:52.081 [info] 4\n\n2024-09-16 21:35:57.213 [info] Loading /workspaces/contoso-chat/.env\n2024-09-16 21:35:43.678 [info] Calling ...\n2024-09-16 21:35:58.108 [info] 5\n\n2024-09-16 21:36:05.996 [info] Loading /workspaces/contoso-chat/.env\n2024-09-16 21:35:43.678 [info] Calling ...\n2024-09-16 21:36:06.910 [info] 5\n</code></pre></li> <li>These are the outputs from running evaluators for 4 metrics<ul> <li>Coherence = how well do sentences fit together</li> <li>Fluency = quality of sentences in the answer</li> <li>Groundedness = is answer logically derived from context provided</li> <li>Relevance = does answer address the main elements of question</li> </ul> </li> <li>Take a minute to open each prompty and understand the template setup.</li> </ul> Step 2: Execute AI-Assisted Evaluation <ul> <li>Click on <code>src/api/evaluate-chat-flow.ipynb</code></li> <li>You should see: a Jupyter notebook<ul> <li><code>pip install tabulate</code> if not already installed</li> <li>Select Kernel</li> <li>Run all - this will take a while</li> </ul> </li> <li>Observe the following files while you wait<ul> <li>Test Prompts = <code>evaluators/data.jsonl</code></li> <li>Chat Responses = <code>result.jsonl</code></li> <li>Evaluated Results = <code>result_evaluated.jsonl</code></li> <li>Evaliation Summary = computed from <code>eval_results.jsonl</code></li> </ul> </li> </ul> Step 3: Understand Evaluation Workflow <ul> <li>Walk through the steps in the notebook<ul> <li>Load test data - from JSONL file</li> <li>Create response data - using the <code>chat.prompty</code> we are building</li> <li>Evaluate results - using results from chat, for 4 criteria (promptys)</li> </ul> </li> <li> <p>Explore the results of the notebook run</p> <ul> <li>What are the evaluated criteria?</li> <li>What are the scores?</li> <li>How do scores reflect on the criteria and test responses?</li> </ul> </li> <li> <p>Experiments you can try</p> <ul> <li>Modify a custom evaluator prompty - change how it scores that criteria</li> <li>Modify data.jsonl - add new test prompts to evaluate for edge cases</li> </ul> </li> </ul> Step 4: Understand Observability with Tracer (optional) <ul> <li>Revisit the <code>contoso_chat/chat_request.py</code> and <code>evaluators/coherence.py</code> files</li> <li>Explain the <code>PromptyTracer</code> and <code>@trace</code> decoration features</li> <li>Look for the <code>src/api/.runs</code> folder and click on a <code>.tracy</code> file</li> <li>Explore the traces to understand the telemetry captured for debugging</li> </ul> Congratulations \ud83c\udf89 - You used AI-Assisted Evaluation with custom evaluators!"},{"location":"03-Workshop-Build/06-operationalization/","title":"6\ufe0f\u20e3 | Deploy with ACA","text":"Step 1: Explore the Codebase <ul> <li>The Contoso Chat app is deployed as an Azure Container App (shown prior)</li> <li>It is implemented as a FASTAPI endpoint with two routes (\"/\" and \"/api/create_response\")</li> <li>View the <code>src/api/main.py</code> to learn about the parameters expected by the latter</li> <li>View the <code>src/api/product/product.py</code> to see information retrieval for RAG pattern usage</li> <li>View the <code>src/api/contoso_chat/chat_request.py</code> to see main chat AI workflow orchestration</li> </ul> Step 2: Test Endpoint Locally <ol> <li>Let's run the server locally, for testing:<ul> <li>change directories to the root of your repo</li> <li>run this command: <code>fastapi dev src/api/main.py</code></li> <li>you should see a popup dialog - click \"Open in Browser\"</li> <li>you should see: the default \"Hello World\" page (route=<code>/</code>)</li> </ul> </li> <li>Add a <code>/docs</code> suffix to page URL - you should see: FastAPI page</li> <li>Expand the <code>POST</code> section by clicking the arrow<ul> <li>click <code>Try it out</code> to make inputs editable</li> <li>enter <code>Tell me about your tents</code> for question</li> <li>enter <code>2</code> for customer_id</li> <li>enter []` for chat_history</li> <li>enter Execute to run the query</li> </ul> </li> <li>You should get a valid response with <code>answer</code> and <code>context</code>.</li> <li>\u2705 | You just tested your Contoso Chat app with valid inputs!</li> </ol> Step 3: Make changes &amp; test (awareness only) <ol> <li>Make changes to <code>main.py</code> - e.g., change \"Hello World\" to \"Hello AI Tour!\"</li> <li>Run <code>fastapi dev src/api/main.py</code> again to see changes<ul> <li>default route at \"/\" now shows updated message</li> </ul> </li> <li>The repository uses <code>azd</code> for deployment - learn more in the docs.</li> </ol>"},{"location":"04-Summary-Teardown/07-cleanup/","title":"7\ufe0f\u20e3 | Wrap-up Tasks","text":"<p>Don't Forget - End the Skillable Session</p> <p>Visit the Skillable launch page and click <code>End Session</code> to end the session and release all resources. This allows the lab to be run again without quota issues for others.</p> <p>Don't Forget - Stop Your Codespaces</p> <p>Visit https://github.com/codespaces - locate the Codespaces instance you are currently running, and stop or delete it to prevent continued usage of the storage or processing quotas.</p> <p>Reminder - Give us Feedback</p> <p>Visit <code>LINK TBD</code> to give us feedback on this session</p> <p>Reminder - Star the Repo</p> <p>Visit Contoso Chat and give us a \ud83c\udf1f to help raise awareness of this workshop!</p>"},{"location":"04-Summary-Teardown/08-resources/","title":"8\ufe0f\u20e3 | Next Steps","text":""}]}